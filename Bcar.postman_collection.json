{
	"info": {
		"_postman_id": "32fd44df-5fbd-4b4a-aed6-2410c7b5b99e",
		"name": "Bcar",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36001454",
		"_collection_link": "https://bcar99.postman.co/workspace/bcar~a013fcf3-92fa-4ad4-9765-a612edaa5212/collection/36001454-32fd44df-5fbd-4b4a-aed6-2410c7b5b99e?action=share&source=collection_link&creator=36001454"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login Successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const token = pm.response.json().id_token;\r",
											"    pm.environment.set(\"JWT_Token\", token);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid token\", () => {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.expect(data).to.have.property('id_token');\r",
											"\r",
											"    pm.expect(data.id_token).to.be.a('string').and.not.empty;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JWT format\", () => {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    const jwtRegex = /^[A-Za-z0-9\\-_=]+\\.[A-Za-z0-9\\-_=]+\\.?[A-Za-z0-9\\-_.+/=]*$/;\r",
											"    pm.expect(data.id_token).to.match(jwtRegex);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						},
						{
							"name": "auth zone manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Login Successful\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    const token = pm.response.json().id_token;\r",
											"    pm.environment.set(\"JWT_Token_ZoneManager\", token);\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid token\", () => {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    pm.expect(data).to.have.property('id_token');\r",
											"\r",
											"    pm.expect(data.id_token).to.be.a('string').and.not.empty;\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JWT format\", () => {\r",
											"    const data = pm.response.json();\r",
											"\r",
											"    const jwtRegex = /^[A-Za-z0-9\\-_=]+\\.[A-Za-z0-9\\-_=]+\\.?[A-Za-z0-9\\-_.+/=]*$/;\r",
											"    pm.expect(data.id_token).to.match(jwtRegex);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"zoneManager@email.com\",\r\n  \"password\": \"123456\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "auth invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[status] 401 Login failed - Unauthorized\", function () {\r",
											"\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[FORMAT] Valid message\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).equal('Bad credentials')\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"admi\",\r\n  \"password\": \"admin\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/authenticate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"authenticate"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "zone manager",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Created response status\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    const data = pm.response.json();\r",
											"    pm.environment.set(\"zoneManagerId\", data.id);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"\r",
											"// ____________ 3. VALIDATION MÉTIER ____________\r",
											"// Validation des dates\r",
											"pm.test(\"[DATES] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const isoDate = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r",
											"    pm.expect(data.contractStartDate).to.match(isoDate);\r",
											"    pm.expect(data.contractEndDate).to.match(isoDate);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATES] Chronologie valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const start = new Date(data.contractStartDate);\r",
											"    const end = new Date(data.contractEndDate);\r",
											"    pm.expect(start.getTime()).to.be.below(end.getTime());\r",
											"});\r",
											"\r",
											"// Validation email\r",
											"pm.test(\"[EMAIL] Format\", () => {\r",
											"    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.email).to.match(emailRegex);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountStatus\" : \"ACTIF\" ,\r\n    \"address\" : null ,\r\n    \"birthDate\" : \"1991-05-29T23:00:00.000Z\" ,\r\n    \"city\" : \"Bizerte Nord\" ,\r\n    \"contractEndDate\" : \"2025-03-29T23:00:00.000Z\" ,\r\n    \"contractNumber\" : null ,\r\n    \"contractStartDate\" : \"2025-02-28T23:00:00.000Z\" ,\r\n    \"email\" : \"{{zoneManagerEmail}}\" ,\r\n    \"firstName\" : \"Iliana\" ,\r\n    \"governorate\" : \"Bizerte\" ,\r\n    \"gpsCoordinates\" : null ,\r\n    \"id\" : null ,\r\n    \"lastName\" :\"Marks\" ,\r\n    \"phoneNumber\" : 45800000 ,\r\n    \"sexe\" : \"Male\" ,\r\n    \"totalPartners\" : null ,\r\n    \"user\" : null ,\r\n    \"zone\" : \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/zone-managers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 200 Validation\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// 3. _____ BUSINESS VALIDATION _____\r",
											"pm.test(\"[DATES] Chronological Order\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const start = new Date(data.contractStartDate);\r",
											"    const end = new Date(data.contractEndDate);\r",
											"    pm.expect(start.getTime())\r",
											"        .to.be.below(end.getTime(), \"Contract start date after end date\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[EMAIL] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r",
											"    pm.expect(data.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/zone-managers/{{zoneManagerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers",
										"{{zoneManagerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"// 3. _____ DATA VALIDATION _____\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(manager => {\r",
											"        const id = manager.id;\r",
											"\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"[DATES] Chronological consistency\", () => {\r",
											"    pm.response.json().forEach(manager=> {\r",
											"        const start = new Date(manager.contractStartDate);\r",
											"        const end = new Date(manager.contractEndDate);\r",
											"        pm.expect(start.getTime()).to.be.below(end.getTime(),\r",
											"            `Invalid dates for offer ${manager.id}`);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/zone-managers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 200 Validation\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"// 3. _____ BUSINESS VALIDATION _____\r",
											"pm.test(\"[DATES] Chronological Order\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const start = new Date(data.contractStartDate);\r",
											"    const end = new Date(data.contractEndDate);\r",
											"    pm.expect(start.getTime())\r",
											"        .to.be.below(end.getTime(), \"Contract start date after end date\");\r",
											"});\r",
											"\r",
											"pm.test(\"[EMAIL] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r",
											"    pm.expect(data.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/zone-managers/by-email/{{zoneManagerEmail}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers",
										"by-email",
										"{{zoneManagerEmail}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\" : \"{{zoneManagerId}}\",\r\n  \"address\" : \"test1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/zone-managers/{{zoneManagerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers",
										"{{zoneManagerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/zone-managers/{{zoneManagerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers",
										"{{zoneManagerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/zone-managers/{{zoneManagerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers",
										"{{zoneManagerId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "create (Email is already in use)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[EMAIL] already in use\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Email is already in use!\")\r",
											"});\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountStatus\" : \"ACTIF\" ,\r\n    \"address\" : null ,\r\n    \"birthDate\" : \"1991-05-29T23:00:00.000Z\" ,\r\n    \"city\" : \"Bizerte Nord\" ,\r\n    \"contractEndDate\" : \"2025-03-29T23:00:00.000Z\" ,\r\n    \"contractNumber\" : null ,\r\n    \"contractStartDate\" : \"2025-02-28T23:00:00.000Z\" ,\r\n    \"email\" : \"zoneManager@email.com\" ,\r\n    \"firstName\" : \"Iliana\" ,\r\n    \"governorate\" : \"Bizerte\" ,\r\n    \"gpsCoordinates\" : null ,\r\n    \"id\" : null ,\r\n    \"lastName\" :\"Marks\" ,\r\n    \"phoneNumber\" : 45800000 ,\r\n    \"sexe\" : \"Male\" ,\r\n    \"totalPartners\" : null ,\r\n    \"user\" : null ,\r\n    \"zone\" : \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/zone-managers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers"
									]
								}
							},
							"response": []
						},
						{
							"name": "create (invalide date form)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[DETAIL] Failed to read request\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Failed to read request\")\r",
											"});\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accountStatus\" : \"ACTIF\" ,\r\n    \"address\" : null ,\r\n    \"birthDate\" : \"1991-05-29T23:00:00.000Z\" ,\r\n    \"city\" : \"Bizerte Nord\" ,\r\n    \"contractEndDate\" : \"bla bla\" ,\r\n    \"contractNumber\" : null ,\r\n    \"contractStartDate\" : \"2025-02-28T23:00:00.000Z\" ,\r\n    \"email\" : \"{{zoneManagerEmail}}\" ,\r\n    \"firstName\" : \"Iliana\" ,\r\n    \"governorate\" : \"Bizerte\" ,\r\n    \"gpsCoordinates\" : null ,\r\n    \"id\" : null ,\r\n    \"lastName\" :\"Marks\" ,\r\n    \"phoneNumber\" : 45800000 ,\r\n    \"sexe\" : \"Male\" ,\r\n    \"totalPartners\" : null ,\r\n    \"user\" : null ,\r\n    \"zone\" : \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/zone-managers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Not Found Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[TITLE] Not Found\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.title).to.equal(\"Not Found\")\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/zone-managers/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "update (id invalid)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\" : 1,\r\n  \"address\" : \"test1\",\r\n  \"zone\" : \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/zone-managers/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete type of id invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/zone-managers/gg",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"zone-managers",
										"gg"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Partner",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. RESPONSE BASICS ____________\r",
											"pm.test(\"[HTTP] Created status verification\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"        pm.environment.set(\"partnerId\", pm.response.json().id);\r",
											"});\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// ____________ 2. VALIDATION MÉTIER ____________\r",
											"// Validation des dates\r",
											"pm.test(\"[DATES] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const isoDate = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r",
											"    pm.expect(data.contractStartDate).to.match(isoDate);\r",
											"    pm.expect(data.contractEndDate).to.match(isoDate);\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Valid date sequence\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const start = new Date(data.contractStartDate);\r",
											"    const end = new Date(data.contractEndDate);\r",
											"    pm.expect(start.getTime())\r",
											"        .to.be.below(end.getTime(), \r",
											"            \"Expiration date must be after start date\");\r",
											"});\r",
											"\r",
											"// Validation email\r",
											"pm.test(\"[EMAIL] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r",
											"    pm.expect(data.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"        pm.expect(data.id).equal(pm.environment.get(\"partnerId\"))\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": null,\r\n  \"projectName\": \"Evan Solomon\",\r\n  \"partnerType\": \"SIMPLE\",\r\n  \"accountStatus\": \"ACTIF\",\r\n  \"firstName\": \"Cain\",\r\n  \"lastName\": \"Beasley\",\r\n  \"phoneNumber\": 69765986,\r\n  \"projectCategory\": \"CONCESSIONNAIRES\",\r\n  \"projectSubCategory\": null,\r\n  \"linkedin\": null,\r\n  \"description\": \"Quis dolor recusanda\",\r\n  \"fiscalIdType\": \"registre_commerce\",\r\n  \"fiscalId\": \"32689\",\r\n  \"phoneNumberManager\": 78398569,\r\n  \"label\": \"Marque internationale\",\r\n  \"email\": \"{{partnerEmail}}\",\r\n  \"zone\": \"1\",\r\n  \"governorate\": \"Bizerte\",\r\n  \"city\": \"Menzel Bourguiba\",\r\n  \"contractNumber\": null,\r\n  \"serviceNumber\": null,\r\n  \"companyName\": \"Conner and Spears Associates\",\r\n  \"workingHoursAndDays\": \"[{\\\"isOpen\\\":true,\\\"openDay\\\":\\\"Lundi\\\",\\\"hasBreak\\\":false,\\\"morningOpenTime\\\":{\\\"hours\\\":8,\\\"minutes\\\":0},\\\"morningCloseTime\\\":{\\\"hours\\\":12,\\\"minutes\\\":0},\\\"afternoonOpenTime\\\":{\\\"hours\\\":null,\\\"minutes\\\":null},\\\"afternoonCloseTime\\\":{\\\"hours\\\":null,\\\"minutes\\\":null}},{\\\"isOpen\\\":true,\\\"openDay\\\":\\\"Mardi\\\",\\\"hasBreak\\\":false,\\\"morningOpenTime\\\":{\\\"hours\\\":8,\\\"minutes\\\":0},\\\"morningCloseTime\\\":{\\\"hours\\\":12,\\\"minutes\\\":0},\\\"afternoonOpenTime\\\":{\\\"hours\\\":null,\\\"minutes\\\":null},\\\"afternoonCloseTime\\\":{\\\"hours\\\":null,\\\"minutes\\\":null}}]\",\r\n  \"vehiculeInfo\": \"[{\\\"type\\\":\\\"VOITURE_DE_TOURISME\\\",\\\"brands\\\":[\\\"ALSA\\\",\\\"ASIA\\\"]},{\\\"type\\\":\\\"AUTOBUS_AUTOCAR\\\",\\\"brands\\\":[\\\"AC\\\"]}]\",\r\n  \"coverPhoto\": \"[]\",\r\n  \"address\": \"4QXC+88 Menzel Bourguiba, Tunisia\",\r\n  \"gpsCoordinates\": \"37.148285140408305, 9.770783951171875\",\r\n  \"website\": null,\r\n  \"facebook\": null,\r\n  \"instagram\": null,\r\n  \"contractStartDate\": \"2025-01-01T23:00:00.000Z\",\r\n  \"contractEndDate\": \"2027-03-12T23:00:00.000Z\",\r\n  \"user\": null,\r\n  \"cumulativeDiscounts\": null,\r\n  \"isAnnouncer\": true,\r\n  \"createdBy\": null,\r\n  \"filiales\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/partners",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by email zone manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/by-ZoneManager/zoneManager@email.com",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"by-ZoneManager",
										"zoneManager@email.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/{{partnerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"{{partnerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get is announcer and createdBy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/isAnnouncer/createdBy/1001",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"isAnnouncer",
										"createdBy",
										"1001"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"// 3. _____ DATA VALIDATION _____\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(partner => {\r",
											"        const id = partner.id;\r",
											"\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"[DATES] Chronological consistency\", () => {\r",
											"    pm.response.json().forEach(partner=> {\r",
											"        const start = new Date(partner.contractStartDate);\r",
											"        const end = new Date(partner.contractEndDate);\r",
											"        pm.expect(start.getTime()).to.be.below(end.getTime(),\r",
											"            `Invalid dates for offer ${partner.id}`);\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/partners",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "AnnualDiscountExiste",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/{{partnerId}}/AnnualDiscountExiste",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"{{partnerId}}",
										"AnnualDiscountExiste"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{partnerId}}\",\r\n    \"label\": \"test11 update test\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/partners/{{partnerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"{{partnerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/{{partnerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"{{partnerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "test delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/{{partnerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"{{partnerId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "create (Email is already in use)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[EMAIL] already in use\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Email is already in use!\")\r",
											"});\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": null,\r\n  \"projectName\": \"Evan Solomon\",\r\n  \"partnerType\": \"SIMPLE\",\r\n  \"accountStatus\": \"ACTIF\",\r\n  \"firstName\": \"Cain\",\r\n  \"lastName\": \"Beasley\",\r\n  \"phoneNumber\": 69765986,\r\n  \"projectCategory\": \"CONCESSIONNAIRES\",\r\n  \"projectSubCategory\": null,\r\n  \"linkedin\": null,\r\n  \"description\": \"Quis dolor recusanda\",\r\n  \"fiscalIdType\": \"registre_commerce\",\r\n  \"fiscalId\": \"32689\",\r\n  \"phoneNumberManager\": 78398569,\r\n  \"label\": \"Marque internationale\",\r\n  \"email\": \"{{partnerEmail}}\",\r\n  \"zone\": \"1\",\r\n  \"governorate\": \"Bizerte\",\r\n  \"city\": \"Menzel Bourguiba\",\r\n  \"contractNumber\": null,\r\n  \"serviceNumber\": null,\r\n  \"companyName\": \"Conner and Spears Associates\",\r\n  \"workingHoursAndDays\": \"[{\\\"isOpen\\\":true,\\\"openDay\\\":\\\"Lundi\\\",\\\"hasBreak\\\":false,\\\"morningOpenTime\\\":{\\\"hours\\\":8,\\\"minutes\\\":0},\\\"morningCloseTime\\\":{\\\"hours\\\":12,\\\"minutes\\\":0},\\\"afternoonOpenTime\\\":{\\\"hours\\\":null,\\\"minutes\\\":null},\\\"afternoonCloseTime\\\":{\\\"hours\\\":null,\\\"minutes\\\":null}},{\\\"isOpen\\\":true,\\\"openDay\\\":\\\"Mardi\\\",\\\"hasBreak\\\":false,\\\"morningOpenTime\\\":{\\\"hours\\\":8,\\\"minutes\\\":0},\\\"morningCloseTime\\\":{\\\"hours\\\":12,\\\"minutes\\\":0},\\\"afternoonOpenTime\\\":{\\\"hours\\\":null,\\\"minutes\\\":null},\\\"afternoonCloseTime\\\":{\\\"hours\\\":null,\\\"minutes\\\":null}}]\",\r\n  \"vehiculeInfo\": \"[{\\\"type\\\":\\\"VOITURE_DE_TOURISME\\\",\\\"brands\\\":[\\\"ALSA\\\",\\\"ASIA\\\"]},{\\\"type\\\":\\\"AUTOBUS_AUTOCAR\\\",\\\"brands\\\":[\\\"AC\\\"]}]\",\r\n  \"coverPhoto\": \"[]\",\r\n  \"address\": \"4QXC+88 Menzel Bourguiba, Tunisia\",\r\n  \"gpsCoordinates\": \"37.148285140408305, 9.770783951171875\",\r\n  \"website\": null,\r\n  \"facebook\": null,\r\n  \"instagram\": null,\r\n  \"contractStartDate\": \"2025-01-01T23:00:00.000Z\",\r\n  \"contractEndDate\": \"2027-03-12T23:00:00.000Z\",\r\n  \"user\": null,\r\n  \"cumulativeDiscounts\": null,\r\n  \"isAnnouncer\": true,\r\n  \"createdBy\": null,\r\n  \"filiales\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/partners",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by email zone manager not existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Not found status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/by-ZoneManager/zoneManager@test.com",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"by-ZoneManager",
										"zoneManager@test.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id not existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Not found status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "get is announcer type id invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/isAnnouncer/createdBy/ss",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"isAnnouncer",
										"createdBy",
										"ss"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by group id not existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Not Fount status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/1/filiales",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"1",
										"filiales"
									]
								}
							},
							"response": []
						},
						{
							"name": "update partner not existe",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{partnerId}}\",\r\n    \"label\": \"test11 update test\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/partners/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete type id invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/aa",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"aa"
									]
								}
							},
							"response": []
						},
						{
							"name": "AnnualDiscountExiste type of id partner invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/partners/pp/AnnualDiscountExiste",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"partners",
										"pp",
										"AnnualDiscountExiste"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Announcers",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// ____________ 1. RESPONSE BASICS ____________\r",
											"pm.test(\"[HTTP] Created status verification\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"        pm.environment.set(\"announcerId\", pm.response.json().id);\r",
											"});\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// ____________ 2. VALIDATION MÉTIER ____________\r",
											"// Validation des dates\r",
											"pm.test(\"[DATES] Format\", () => {\r",
											"    const isoDate = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.contractStartDate).to.match(isoDate);\r",
											"    pm.expect(data.contractEndDate).to.match(isoDate);\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Valid date sequence\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const start = new Date(data.contractStartDate);\r",
											"    const end = new Date(data.contractEndDate);\r",
											"    pm.expect(start.getTime())\r",
											"        .to.be.below(end.getTime(), \r",
											"            \"Expiration date must be after start date\");\r",
											"});\r",
											"\r",
											"// Validation email\r",
											"pm.test(\"[EMAIL] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r",
											"    pm.expect(data.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"profilePhoto\": \"https://storage.googleapis.com/download/storage/v1/b/bcar-public-bucket/o/file-1745502266.jpg?generation=1745502267721220&alt=media\",\r\n    \"coverPhoto\": \"[]\",\r\n    \"projectName\": \"Basil Shields\",\r\n    \"companyName\": \"Owens and Mosley Plc\",\r\n    \"phoneNumber\": 97274992,\r\n    \"accountStatus\": \"ACTIF\",\r\n    \"annonceurCategory\": \"BLOGUEUR_AUTOMOBILE\",\r\n    \"firstName\": \"Denise\",\r\n    \"lastName\": \"Roberts\",\r\n    \"managerPhoneNumber\": 80488888,\r\n    \"email\": \"{{announcerEmail}}\",\r\n    \"website\": null,\r\n    \"facebook\": null,\r\n    \"instagram\": null,\r\n    \"linkedin\": null,\r\n    \"address\": \"RJ6R+Q3Q، نهج الصفا، Susah, Tunisia\",\r\n    \"zone\": \"3\",\r\n    \"governorate\": \"Sousse\",\r\n    \"gpsCoordinates\": \"35.811975227673834, 10.6400771640625\",\r\n    \"city\": \"Akouda\",\r\n    \"contractNumber\": null,\r\n    \"contractStartDate\": \"2025-04-01\",\r\n    \"contractEndDate\": \"2031-03-07\",\r\n    \"fiscalId\": \"889854\",\r\n    \"fiscalIdType\": \"registre_commerce\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/announcers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers"
									]
								},
								"description": "### Add Announcer\n\nThis endpoint allows you to add a new announcer to the system.\n\n#### Request Body\n\n- `profilePhoto` (string): The URL of the profile photo for the announcer.\n    \n- `coverPhoto` (string): An array of cover photos for the announcer.\n    \n- `projectName` (string): The name of the project associated with the announcer.\n    \n- `companyName` (string): The name of the company associated with the announcer.\n    \n- `phoneNumber` (number): The phone number of the announcer.\n    \n- `accountStatus` (string): The status of the announcer's account.\n    \n- `annonceurCategory` (string): The category of the announcer.\n    \n- `firstName` (string): The first name of the announcer.\n    \n- `lastName` (string): The last name of the announcer.\n    \n- `managerPhoneNumber` (number): The phone number of the manager.\n    \n- `email` (string): The email address of the announcer.\n    \n- `website` (string): The website of the announcer.\n    \n- `facebook` (string): The Facebook profile of the announcer.\n    \n- `instagram` (string): The Instagram profile of the announcer.\n    \n- `linkedin` (string): The LinkedIn profile of the announcer.\n    \n- `address` (string): The address of the announcer.\n    \n- `zone` (string): The zone of the announcer's location.\n    \n- `governorate` (string): The governorate of the announcer's location.\n    \n- `gpsCoordinates` (string): The GPS coordinates of the announcer's location.\n    \n- `city` (string): The city of the announcer's location.\n    \n- `contractNumber` (string): The contract number of the announcer.\n    \n- `contractStartDate` (string): The start date of the contract.\n    \n- `contractEndDate` (string): The end date of the contract.\n    \n- `fiscalId` (string): The fiscal ID of the announcer.\n    \n- `fiscalIdType` (string): The type of fiscal ID.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created announcer, including their unique `id`, `profilePhoto`, `coverPhoto`, `projectName`, `companyName`, `phoneNumber`, `accountStatus`, `firstName`, `lastName`, `managerPhoneNumber`, `email`, `website`, `facebook`, `instagram`, `linkedin`, `address`, `zone`, `governorate`, `gpsCoordinates`, `city`, `contractNumber`, `contractStartDate`, `contractEndDate`, `fiscalId`, `fiscalIdType`, `annonceurCategory`, and details of the `user` and `createdBy`."
							},
							"response": []
						},
						{
							"name": "Get an announcer by their ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"   // pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"// 3. _____ BUSINESS LOGIC _____\r",
											"pm.test(\"[LOGIC] Valid date sequence\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const startDate = new Date(data.contractStartDate);\r",
											"    const expirationDate = new Date(data.contractEndDate);\r",
											"\r",
											"    pm.expect(startDate.getTime())\r",
											"        .to.be.below(expirationDate.getTime(), \r",
											"            \"Expiration date must be after start date\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/announcers/1153",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers",
										"1153"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get announcers by creator ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed the error and removed redundant performance test\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(announcer => {\r",
											"        const id = announcer.id;\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"[DATES] Chronological consistency\", () => {\r",
											"    \r",
											"    pm.response.json().forEach(announcer=> {\r",
											"        const start = new Date(announcer.contractStartDate);\r",
											"        const end = new Date(announcer.contractEndDate);\r",
											"        pm.expect(start.getTime()).to.be.below(end.getTime(),\r",
											"            `Invalid dates for announcer ${announcer.id}`);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/announcers/createdBy/{{creatorId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers",
										"createdBy",
										"{{creatorId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all announcers",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed the error and removed redundant performance test\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(announcer => {\r",
											"        const id = announcer.id;\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/announcers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update information for an announcer",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": 1153,\r\n\r\n    \"facebook\": \"mmmffmm\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/announcers/1153",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers",
										"1153"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete an announcer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/announcers/{{announcerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers",
										"{{announcerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Confirm the announcer has been deleted",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/announcers/{{announcerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers",
										"{{announcerId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "Create an announcer with an email that already exists.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[EMAIL] already in use\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Email is already in use!\")\r",
											"});\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n    \"profilePhoto\": \"https://storage.googleapis.com/download/storage/v1/b/bcar-public-bucket/o/file-1745502266.jpg?generation=1745502267721220&alt=media\",\r\n    \"coverPhoto\": \"[]\",\r\n    \"projectName\": \"Basil Shields\",\r\n    \"companyName\": \"Owens and Mosley Plc\",\r\n    \"phoneNumber\": 97274992,\r\n    \"accountStatus\": \"ACTIF\",\r\n    \"annonceurCategory\": \"BLOGUEUR_AUTOMOBILE\",\r\n    \"firstName\": \"Denise\",\r\n    \"lastName\": \"Roberts\",\r\n    \"managerPhoneNumber\": 80488888,\r\n    \"email\": \"{{announcerEmail}}\",\r\n    \"website\": null,\r\n    \"facebook\": null,\r\n    \"instagram\": null,\r\n    \"linkedin\": null,\r\n    \"address\": \"RJ6R+Q3Q، نهج الصفا، Susah, Tunisia\",\r\n    \"zone\": \"3\",\r\n    \"governorate\": \"Sousse\",\r\n    \"gpsCoordinates\": \"35.811975227673834, 10.6400771640625\",\r\n    \"city\": \"Akouda\",\r\n    \"contractNumber\": null,\r\n    \"contractStartDate\": \"2025-04-01\",\r\n    \"contractEndDate\": \"2031-03-07\",\r\n    \"fiscalId\": \"889854\",\r\n    \"fiscalIdType\": \"registre_commerce\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/announcers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers"
									]
								},
								"description": "### Add Announcer\n\nThis endpoint allows you to add a new announcer to the system.\n\n#### Request Body\n\n- `profilePhoto` (string): The URL of the profile photo for the announcer.\n    \n- `coverPhoto` (string): An array of cover photos for the announcer.\n    \n- `projectName` (string): The name of the project associated with the announcer.\n    \n- `companyName` (string): The name of the company associated with the announcer.\n    \n- `phoneNumber` (number): The phone number of the announcer.\n    \n- `accountStatus` (string): The status of the announcer's account.\n    \n- `annonceurCategory` (string): The category of the announcer.\n    \n- `firstName` (string): The first name of the announcer.\n    \n- `lastName` (string): The last name of the announcer.\n    \n- `managerPhoneNumber` (number): The phone number of the manager.\n    \n- `email` (string): The email address of the announcer.\n    \n- `website` (string): The website of the announcer.\n    \n- `facebook` (string): The Facebook profile of the announcer.\n    \n- `instagram` (string): The Instagram profile of the announcer.\n    \n- `linkedin` (string): The LinkedIn profile of the announcer.\n    \n- `address` (string): The address of the announcer.\n    \n- `zone` (string): The zone of the announcer's location.\n    \n- `governorate` (string): The governorate of the announcer's location.\n    \n- `gpsCoordinates` (string): The GPS coordinates of the announcer's location.\n    \n- `city` (string): The city of the announcer's location.\n    \n- `contractNumber` (string): The contract number of the announcer.\n    \n- `contractStartDate` (string): The start date of the contract.\n    \n- `contractEndDate` (string): The end date of the contract.\n    \n- `fiscalId` (string): The fiscal ID of the announcer.\n    \n- `fiscalIdType` (string): The type of fiscal ID.\n    \n\n#### Response\n\nUpon successful creation, the endpoint returns the details of the newly created announcer, including their unique `id`, `profilePhoto`, `coverPhoto`, `projectName`, `companyName`, `phoneNumber`, `accountStatus`, `firstName`, `lastName`, `managerPhoneNumber`, `email`, `website`, `facebook`, `instagram`, `linkedin`, `address`, `zone`, `governorate`, `gpsCoordinates`, `city`, `contractNumber`, `contractStartDate`, `contractEndDate`, `fiscalId`, `fiscalIdType`, `annonceurCategory`, and details of the `user` and `createdBy`."
							},
							"response": []
						},
						{
							"name": "Get an announcer by ID not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Not Found Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[TITLE] Not Found\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.title).to.equal(\"Not Found\")\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/announcers/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update information for an announcer by ID not existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Bad Request 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[TITLE] Not Found\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.title).to.equal(\"Bad Request\")\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{announcerId}}\",\r\n\r\n    \"facebook\": \"mmmffmm\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/announcers/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete type of id invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/announcers/aa",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"announcers",
										"aa"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "commercial",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create commercial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. RESPONSE BASICS ____________\r",
											"pm.test(\"[HTTP] Created status verification\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"        pm.environment.set(\"commercialId\", pm.response.json().id);\r",
											"        pm.environment.set(\"commercialEmail\", pm.response.json().email);\r",
											"});\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// ____________ 2. VALIDATION MÉTIER ____________\r",
											"// Validation des dates\r",
											"pm.test(\"[DATES] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const isoDate = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r",
											"    pm.expect(data.contractStartDate).to.match(isoDate);\r",
											"    pm.expect(data.contractEndDate).to.match(isoDate);\r",
											"});\r",
											"\r",
											"\r",
											"// Validation email\r",
											"pm.test(\"[EMAIL] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r",
											"    pm.expect(data.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token_ZoneManager}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"acceptationDate\": \"1975-02-05\",\r\n  \"accountStatus\": \"ACTIF\",\r\n  \"address\": \"Veniam libero nisi\",\r\n  \"age\": 31,\r\n  \"category\": \"AMBULANT_SELLER\",\r\n  \"city\": \"Bizerte Nord\",\r\n  \"commission\": null,\r\n  \"contractEndDate\": \"2025-04-01\",\r\n  \"contractNumber\": null,\r\n  \"contractStartDate\": \"2025-04-01\",\r\n  \"dob\": \"1993-06-01\",\r\n  \"email\": \"{{commercialEmail}}\",\r\n  \"firstName\": \"kkkkk\",\r\n  \"fiscalId\": null,\r\n  \"fiscalIdType\": null,\r\n  \"gender\": \"Homme\",\r\n  \"governorate\": \"Bizerte\",\r\n  \"gpsCoordinates\": \"\",\r\n  \"lastName\": \"kkkkkk\",\r\n  \"password\": null,\r\n  \"phoneNumber\": \"44000000\",\r\n  \"projectName\": null,\r\n  \"qrCodePrice\": null,\r\n  \"sellPointName\": null,\r\n  \"totalCodesPurchased\": null,\r\n  \"totalCodesRemaining\": null,\r\n  \"totalCodesSold\": null,\r\n  \"totalSales\": null,\r\n  \"user\": null,\r\n  \"zone\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/commercials",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get commercial by email for the zone manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/commercials/by-ZoneManager/zoneManager@email.com",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"by-ZoneManager",
										"zoneManager@email.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get an commercial by their ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/commercials/{{commercialId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"{{commercialId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all commercials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed the error and removed redundant performance test\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/commercials",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update information for an commercial",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token_ZoneManager}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{commercialId}}\",\r\n    \"firstName\": \"rrrr\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/commercials/{{commercialId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"{{commercialId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token_ZoneManager}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/commercials/{{commercialId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"{{commercialId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "test delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/commercials/{{commercialId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"{{commercialId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "create email existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[EMAIL] already in use\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Email is already in use!\")\r",
											"});\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"acceptationDate\": \"1975-02-05\",\r\n  \"accountStatus\": \"ACTIF\",\r\n  \"address\": \"Veniam libero nisi\",\r\n  \"age\": 31,\r\n  \"category\": \"AMBULANT_SELLER\",\r\n  \"city\": \"Bizerte Nord\",\r\n  \"commission\": null,\r\n  \"contractEndDate\": \"2025-04-01\",\r\n  \"contractNumber\": null,\r\n  \"contractStartDate\": \"2025-04-01\",\r\n  \"dob\": \"1993-06-01\",\r\n  \"email\": \"{{commercialEmail}}\",\r\n  \"firstName\": \"kkkkk\",\r\n  \"fiscalId\": null,\r\n  \"fiscalIdType\": null,\r\n  \"gender\": \"Homme\",\r\n  \"governorate\": \"Bizerte\",\r\n  \"gpsCoordinates\": \"\",\r\n  \"lastName\": \"kkkkkk\",\r\n  \"password\": null,\r\n  \"phoneNumber\": \"44000000\",\r\n  \"projectName\": null,\r\n  \"qrCodePrice\": null,\r\n  \"sellPointName\": null,\r\n  \"totalCodesPurchased\": null,\r\n  \"totalCodesRemaining\": null,\r\n  \"totalCodesSold\": null,\r\n  \"totalSales\": null,\r\n  \"user\": null,\r\n  \"zone\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/commercials",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials"
									]
								}
							},
							"response": []
						},
						{
							"name": "create invalide date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[EMAIL] already in use\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Email is already in use!\")\r",
											"});\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"acceptationDate\": \"19-02-35\",\r\n  \"accountStatus\": \"ACTIF\",\r\n  \"address\": \"Veniam libero nisi\",\r\n  \"age\": 31,\r\n  \"category\": \"AMBULANT_SELLER\",\r\n  \"city\": \"Bizerte Nord\",\r\n  \"commission\": null,\r\n  \"contractEndDate\": \"2025-04-01\",\r\n  \"contractNumber\": null,\r\n  \"contractStartDate\": \"bbbb\",\r\n  \"dob\": \"1993-06-01\",\r\n  \"email\": \"{{commercialEmail}}\",\r\n  \"firstName\": \"kkkkk\",\r\n  \"fiscalId\": null,\r\n  \"fiscalIdType\": null,\r\n  \"gender\": \"Homme\",\r\n  \"governorate\": \"Bizerte\",\r\n  \"gpsCoordinates\": \"\",\r\n  \"lastName\": \"kkkkkk\",\r\n  \"password\": null,\r\n  \"phoneNumber\": \"44000000\",\r\n  \"projectName\": null,\r\n  \"qrCodePrice\": null,\r\n  \"sellPointName\": null,\r\n  \"totalCodesPurchased\": null,\r\n  \"totalCodesRemaining\": null,\r\n  \"totalCodesSold\": null,\r\n  \"totalSales\": null,\r\n  \"user\": null,\r\n  \"zone\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/commercials",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by Zone Manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Not Found Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/commercials/by-ZoneManager/zone@email.com",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"by-ZoneManager",
										"zone@email.com"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Not Found Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[TITLE] Not Found\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.title).to.equal(\"Not Found\")\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/commercials/95445465",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"95445465"
									]
								}
							},
							"response": []
						},
						{
							"name": "update id not exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Bad Request 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[TITLE] Not Found\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.title).to.equal(\"Bad Request\")\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{commercialId}}\",\r\n    \"firstName\": \"rrrr\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/commercials/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete id invalable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Not Found Status 500\", () => {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[DETAIL] Not Found\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Commercial not found with id: 1\")\r",
											"});\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/commercials/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"commercials",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Clients",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. RESPONSE BASICS ____________\r",
											"pm.test(\"[HTTP] Created status verification\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"        pm.environment.set(\"clientId\", pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// ____________ 2. VALIDATION MÉTIER ____________\r",
											"// Validation des dates\r",
											"pm.test(\"[DATES] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const isoDate = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r",
											"    pm.expect(data.birthdate).to.match(isoDate);\r",
											"});\r",
											"\r",
											"// Validation email\r",
											"pm.test(\"[EMAIL] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r",
											"    pm.expect(data.email).to.match(emailRegex);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accountStatus\": \"ACTIF\",\r\n  \"accountType\": \"SIMPLE\",\r\n  \"birthdate\": \"2004-05-03T23:00:00.000Z\",\r\n  \"cin\": \"0600000\",\r\n  \"city\": \"El Alia\",\r\n  \"email\": \"{{clientEmail}}\",\r\n  \"fullName\": \"Inga test\",\r\n  \"gender\": \"men\",\r\n  \"phoneNumber\": \"00009139\",\r\n  \"profileStatus\": \"COMPLETE\",\r\n  \"region\": \"Gabés\",\r\n  \"registrationDate\": \"2008-12-06T07:22:00.000Z\",\r\n  \"registrationMode\": \"VOLUNTARY\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/clients",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"// 3. _____ BUSINESS LOGIC _____\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/clients/{{clientId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients",
										"{{clientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed the error and removed redundant performance test\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(client => {\r",
											"        const id = client.id;\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/clients",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{clientId}}\",\r\n    \"fullName\": \"bbb ttt\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/clients/{{clientId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients",
										"{{clientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/clients/{{clientId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients",
										"{{clientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "test delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed ReferenceError: pms is not defined\r",
											"pm.test(\"[HTTP] Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/clients/{{clientId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients",
										"{{clientId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "create accountStatus vide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"accountStatus\": \"\",\r\n  \"accountType\": \"SIMPLE\",\r\n  \"birthdate\": \"2004-05-03T23:00:00.000Z\",\r\n  \"cin\": \"0600000\",\r\n  \"city\": \"El Alia\",\r\n  \"email\": \"{{clientEmail}}\",\r\n  \"fullName\": \"Inga test\",\r\n  \"gender\": \"men\",\r\n  \"phoneNumber\": \"00009139\",\r\n  \"profileStatus\": \"COMPLETE\",\r\n  \"region\": \"Gabés\",\r\n  \"registrationDate\": \"2008-12-06T07:22:00.000Z\",\r\n  \"registrationMode\": \"VOLUNTARY\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/clients",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients"
									]
								}
							},
							"response": []
						},
						{
							"name": "client not fond",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Not Found status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/clients/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "update client not existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"fullName\": \"bbb ttt\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/clients/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete client by type id incorect",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/clients/id",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"clients",
										"id"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "offer",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. RESPONSE BASICS ____________\r",
											"pm.test(\"[HTTP] Created status verification\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"        pm.environment.set(\"offerId\", pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// ____________ 2. LOGIC VALIDATION ____________\r",
											"\r",
											"pm.test(\"[LOGIC] Quantity limits\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.quantity).to.be.above(0, \"Quantity must be positive\");\r",
											"    pm.expect(data.quantity).to.be.below(1000000, \"Unrealistic quantity value\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] amount limits\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.quantity).to.be.above(0, \"Amount must be positive\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"        pm.expect(data.id).equal(pm.environment.get(\"offerId\"))\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"In corporis ipsum ac\",\r\n  \"description\": \"Non omnis id et dol\",\r\n  \"amount\": 62,\r\n  \"quantity\": 212,\r\n  \"expiration_date\": \"2005-11-02\",\r\n  \"start_date\": \"2003-01-24\",\r\n  \"status\": \"EXPIRED\",\r\n  \"partnerId\": 1103\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/offers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Quantity limits\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.quantity).to.be.above(0, \"Quantity must be positive\");\r",
											"    pm.expect(data.quantity).to.be.below(1000000, \"Unrealistic quantity value\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] amount limits\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.quantity).to.be.above(0, \"Amount must be positive\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"        pm.expect(data.id).equal(pm.environment.get(\"offerId\"))\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\" : \"Aut deserunt qui con\",\r\n  \"description\" : \"Impedit iste commod\",\r\n  \"amount\" : 90,\r\n  \"quantity\" : 217,\r\n  \"expiration_date\" : \"2014-11-15\",\r\n  \"partnerId\" : 1051,\r\n  \"start_date\" : \"1993-06-10\",\r\n  \"status\" : \"EXPIRED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/offers/{{offerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"{{offerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by partner id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Quantity limits\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.quantity).to.be.above(0, \"Quantity must be positive\");\r",
											"    pm.expect(data.quantity).to.be.below(1000000, \"Unrealistic quantity value\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] amount limits\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.quantity).to.be.above(0, \"Amount must be positive\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"        pm.expect(data.id).equal(pm.environment.get(\"offerId\"))\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\" : \"Aut deserunt qui con\",\r\n  \"description\" : \"Impedit iste commod\",\r\n  \"amount\" : 90,\r\n  \"quantity\" : 217,\r\n  \"expiration_date\" : \"2014-11-15\",\r\n  \"partnerId\" : 1051,\r\n  \"start_date\" : \"1993-06-10\",\r\n  \"status\" : \"EXPIRED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/offers/{{offerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"{{offerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] 200 OK Status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(`[PERF] Response time < 500ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(offer => {\r",
											"        const id = offer.id;\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/offers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{offerId}}\",\r\n    \"amount\": 102\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/offers/{{offerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"{{offerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/offers/{{offerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"{{offerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/offers/{{offerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"{{offerId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "create invalide",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\" : \"Aut deserunt qui con\",\r\n  \"description\" : \"Impedit iste commod\",\r\n  \"amount\" : 90,\r\n  \"quantity\" :\"fff\",\r\n  \"expiration_date\" : \"2014-11-15\",\r\n  \"partnerId\" : 1101,\r\n  \"start_date\" : \"1993-06-10\",\r\n  \"status\" : \"EXPIRED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/offers",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id invalide",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Not found 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\" : \"Aut deserunt qui con\",\r\n  \"description\" : \"Impedit iste commod\",\r\n  \"amount\" : 90,\r\n  \"quantity\" : 217,\r\n  \"expiration_date\" : \"2014-11-15\",\r\n  \"partnerId\" : 1051,\r\n  \"start_date\" : \"1993-06-10\",\r\n  \"status\" : \"EXPIRED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/offers/5",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by partner id invalide",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Not found status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\" : \"Aut deserunt qui con\",\r\n  \"description\" : \"Impedit iste commod\",\r\n  \"amount\" : 90,\r\n  \"quantity\" : 217,\r\n  \"expiration_date\" : \"2014-11-15\",\r\n  \"partnerId\" : 1051,\r\n  \"start_date\" : \"1993-06-10\",\r\n  \"status\" : \"EXPIRED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/offers/5",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"5"
									]
								}
							},
							"response": []
						},
						{
							"name": "update invalide",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{offerId}}\",\r\n    \"amount\": \"fff\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/offers/{{offerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"{{offerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete type of id invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/offers/aa",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"offers",
										"aa"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "remises",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. RESPONSE BASICS ____________\r",
											"pm.test(\"[HTTP] Created status verification\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"        pm.environment.set(\"discountId\", pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// ____________ 2. LOGIC VALIDATION ____________\r",
											"pm.test(\"[DATES] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const isoDate = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r",
											"    pm.expect(data.startDate).to.match(isoDate);\r",
											"    pm.expect(data.endDate).to.match(isoDate);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATES] Chronologie valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const start = new Date(data.startDate);\r",
											"    const end = new Date(data.endDate);\r",
											"    pm.expect(start.getTime()).to.be.below(end.getTime());\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"projectName\": \"Lareina Newton\",\r\n  \"category\": null,\r\n  \"description\": \"Et cupiditate enim d\",\r\n  \"startDate\": \"1994-04-09T23:00:00.000Z\",\r\n  \"endDate\": \"1994-05-09T23:00:00.000Z\",\r\n  \"zone\": null,\r\n  \"city\": null,\r\n  \"governorate\": null,\r\n  \"status\": \"EXPIRED\",\r\n  \"discountType\": \"Avantagieuse\",\r\n  \"discountTitle\": \"Blanditiis voluptate\",\r\n  \"discountRate\": 87,\r\n  \"renewable\": null,\r\n  \"partnerId\": 1103\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/discounts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"pm.test(\"[DATES] Format\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const isoDate = /^\\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\r",
											"    pm.expect(data.startDate).to.match(isoDate);\r",
											"    pm.expect(data.endDate).to.match(isoDate);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATES] Chronologie valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const start = new Date(data.startDate);\r",
											"    const end = new Date(data.endDate);\r",
											"    pm.expect(start.getTime()).to.be.below(end.getTime());\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"        pm.expect(data.id).equal(pm.environment.get(\"discountId\"))\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\" : \"Aut deserunt qui con\",\r\n  \"description\" : \"Impedit iste commod\",\r\n  \"amount\" : 90,\r\n  \"quantity\" : 217,\r\n  \"expiration_date\" : \"2014-11-15\",\r\n  \"partnerId\" : 1051,\r\n  \"start_date\" : \"1993-06-10\",\r\n  \"status\" : \"EXPIRED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/discounts/{{discountId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts",
										"{{discountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] 200 OK Status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(`[PERF] Response time < 500ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(discount => {\r",
											"        const id = discount.id;\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/discounts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by bypartner id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\" : \"Aut deserunt qui con\",\r\n  \"description\" : \"Impedit iste commod\",\r\n  \"amount\" : 90,\r\n  \"quantity\" : 217,\r\n  \"expiration_date\" : \"2014-11-15\",\r\n  \"partnerId\" : 1051,\r\n  \"start_date\" : \"1993-06-10\",\r\n  \"status\" : \"EXPIRED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/discounts/by-partner/{{partnerId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts",
										"by-partner",
										"{{partnerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{discountId}}\",\r\n    \"description\": \"fffffff\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/discounts/{{discountId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts",
										"{{discountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/discounts/{{discountId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts",
										"{{discountId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete test",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/discounts/{{discountId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts",
										"{{discountId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "create (date invalide)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[EMAIL] already in use\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Failed to read request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"projectName\": \"Sebastian Spencer\",\r\n    \"category\": \"ffff\",\r\n    \"description\": \"opi\",\r\n    \"startDate\": \"bla bla\",\r\n    \"endDate\": \"2025-04-19\",\r\n    \"zone\": \"eeee\",\r\n    \"city\": \"ddddd\",\r\n    \"governorate\": null,\r\n    \"status\": \"ACTIVE\",\r\n    \"discountType\": \"Annuelle\",\r\n    \"discountTitle\": \"tttt\",\r\n    \"discountRate\": 22,\r\n    \"partnerId\": 1401\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/discounts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "create (discountRate invalide)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[EMAIL] already in use\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.equal(\"Failed to read request\")\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"projectName\": \"Sebastian Spencer\",\r\n    \"category\": \"ffff\",\r\n    \"description\": \"opi\",\r\n    \"startDate\": \"2025-03-10\",\r\n    \"endDate\": \"2025-04-19\",\r\n    \"zone\": \"eeee\",\r\n    \"city\": \"ddddd\",\r\n    \"governorate\": null,\r\n    \"status\": \"ACTIVE\",\r\n    \"discountType\": \"Annuelle\",\r\n    \"discountTitle\": \"tttt\",\r\n    \"discountRate\": \"ddd\",\r\n    \"partnerId\": 1401\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/discounts",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Not Found Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[TITLE] Not Found\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.title).to.equal(\"Not Found\")\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/discounts/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "update id not existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"1\",\r\n    \"description\": \"fffffff\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/discounts/0",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete type of id invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/discounts/aa",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"discounts",
										"aa"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Pack & qr code",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create QR code pack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. RESPONSE BASICS ____________\r",
											"pm.test(\"[HTTP] 201 Created status verification\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"    pm.environment.set(\"packId\", pm.response.json()[0].id);});\r",
											"\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"// ____________ 2. LOGIC VALIDATION ____________\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "numberOfPacks",
											"value": "1",
											"type": "text"
										},
										{
											"key": "codesPerPack",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/api/qr-codes/generate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"qr-codes",
										"generate"
									]
								}
							},
							"response": []
						},
						{
							"name": "get pack",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/packs/{{packId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"packs",
										"{{packId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "gat all packs",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] 200 OK Status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(`[PERF] Response time < 500ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(pack => {\r",
											"        const id = pack.id;\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/packs",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"packs"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/packs/{{packId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"packs",
										"{{packId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "create QR code pack in valide type of numberOfPacks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Fixed TypeError by checking if pm.request.body.urlencoded is defined\r",
											"pm.test(\"[HTTP] 400 Mauvaise demande\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											" \r",
											"pm.test(\"[FORMAT] Valid message d'error\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const numberOfPacks = pm.request.body.formdata.find(e => e.key === \"numberOfPacks\").value;\r",
											"    const expectedMessage = `Failed to convert 'numberOfPacks' with value: '${numberOfPacks}'`;\r",
											"    pm.expect(data.detail).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "numberOfPacks",
											"value": "one",
											"type": "text"
										},
										{
											"key": "codesPerPack",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseurl}}/api/qr-codes/generate",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"qr-codes",
										"generate"
									]
								}
							},
							"response": []
						},
						{
							"name": "get pack by id (type of id false)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[HTTP] 400 Mauvaise demande\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid message d'error\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const url = pm.request.url.path;\r",
											"    const value = url[url.length - 1]; // récupère le dernier segment du path\r",
											"    const expectedMessage = `Failed to convert 'id' with value: '${value}'`;\r",
											"    pm.expect(data.detail).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/packs/one",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"packs",
										"one"
									]
								}
							},
							"response": []
						},
						{
							"name": "get pack by id (not found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] 404 Non trouvé\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid message d'error\", () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.detail).to.eql(\"404 NOT_FOUND\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/packs/1",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"packs",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete (type of id false)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"[HTTP] 400 Mauvaise demande\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid message d'error\", () => {\r",
											"    const data = pm.response.json();\r",
											"    const url = pm.request.url.path;\r",
											"    const value = url[url.length - 1]; // récupère le dernier segment du path\r",
											"    const expectedMessage = `Failed to convert 'id' with value: '${value}'`;\r",
											"    pm.expect(data.detail).to.eql(expectedMessage);\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/packs/one",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"packs",
										"one"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Publications",
			"item": [
				{
					"name": "valide",
					"item": [
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. RESPONSE BASICS ____________\r",
											"pm.test(\"[HTTP] Created status verification\", () => {\r",
											"    pm.response.to.have.status(201);\r",
											"        pm.environment.set(\"publicationId\", pm.response.json().id);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.match(/application\\/json/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"datePublication\": \"2025-06-02T13:22:00.000Z\",\r\n    \"description\": \"Omnis ullam adipisci\",\r\n    \"status\": \"EN_ATTENTE\",\r\n    \"partnerId\": 1103,\r\n    \"messageRefus\": null,\r\n    \"dateValidation\": null,\r\n    \"timePublication\": \"01:10\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/publications",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											"pm.test(\"[LOGIC] Id Valide\", () => {\r",
											"    const data = pm.response.json();\r",
											"        pm.expect(data.id).to.not.be.null,`Invalid id`;\r",
											"        pm.expect(data.id).equal(pm.environment.get(\"publicationId\"))\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/publications/{{publicationId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications",
										"{{publicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get all",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] 200 OK Status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(`[PERF] Response time < 500ms`, () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.test(\"[FORMAT] Valid JSON Response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"[LOGIC] Ids Valide\", () => {\r",
											"    pm.response.json().forEach(pub => {\r",
											"        const id = pub.id;\r",
											"        pm.expect(id).to.not.be.null,\r",
											"            `Invalid id`;\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/publications",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications"
									]
								}
							},
							"response": []
						},
						{
							"name": "update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"// 1. _____ STATUS & PERFORMANCE _____\r",
											"pm.test(\"[HTTP] Successful response status\", () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"// 2. _____ STRUCTURE & FORMAT _____\r",
											"pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .to.include(\"application/json\", \"Invalid Content-Type header\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{publicationId}}\",\r\n    \"description\": \"yyyym\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/publications/{{publicationId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications",
										"{{publicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// ____________ 1. SUCCESSFUL DELETION ____________\r",
											"pm.test(\"[HTTP] 204 No Content\", () => {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"pm.test(\"[DATA] No Body Content\", () => {\r",
											"    pm.expect(pm.response.text()).to.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response < 500ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(500, `Timeout: ${pm.response.responseTime}ms`);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/publications/{{publicationId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications",
										"{{publicationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "test delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. _____ HTTP FUNDAMENTALS _____\r",
											"pm.test(\"[HTTP] Status 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/publications/{{publicationId}}",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications",
										"{{publicationId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalide",
					"item": [
						{
							"name": "create invalide status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"announcerId\": {{announcerId}},\r\n  \"datePublication\": \"2025-04-09T23:00:00.000Z\",\r\n  \"description\": \"effefzfz\",\r\n  \"messageRefus\": \"fvfvfqeeqdvv\",\r\n  \"status\": \"\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/publications",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications"
									]
								}
							},
							"response": []
						},
						{
							"name": "get by id not existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Not found 404\", () => {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/publications/0",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "update id not existe",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{publicationId}}\",\r\n    \"description\": \"yyyym\"\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseurl}}/api/publications/0",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete type of id invalide",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"[HTTP] Bad Request status 400\", () => {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"[PERF] Response time <500\", () => {\r",
											"    pm.expect(pm.response.responseTime)\r",
											"        .to.be.below(500, \"Response time exceeded 500ms\");\r",
											"});\r",
											"\r",
											"\r",
											" pm.test(\"[FORMAT] Valid JSON response\", () => {\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
											"        .equal(\"application/problem+json\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{JWT_Token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseurl}}/api/publications/aa",
									"host": [
										"{{baseurl}}"
									],
									"path": [
										"api",
										"publications",
										"aa"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "export Excel",
			"item": [
				{
					"name": "auth Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const token = pm.response.json().id_token;\r",
									"    pm.environment.set(\"JWT_Token\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"admin\",\r\n  \"rememberMe\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/authenticate",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "zoneManagers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[HEADERS] Excel Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet(;.*)?$/i,\r",
									"            \"Invalid Excel type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[EXCEL] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"Excel file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/zone-managers/generate-excel",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"zone-managers",
								"generate-excel"
							]
						}
					},
					"response": []
				},
				{
					"name": "QR codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[HEADERS] Excel Content-Type\", () => {\r",
									"    const contentType = pm.response.headers.get(\"Content-Type\");\r",
									"    pm.expect(contentType).to.match(\r",
									"        /^application\\/(vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet|octet-stream)(;.*)?$/i,\r",
									"        \"Invalid Excel type\"\r",
									"    );\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[EXCEL] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"Excel file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/qr-codes/export/excel",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"qr-codes",
								"export",
								"excel"
							]
						}
					},
					"response": []
				},
				{
					"name": "partners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[HEADERS] Excel Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet(;.*)?$/i,\r",
									"            \"Invalid Excel type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[EXCEL] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"Excel file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/partners/generate-excel",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"partners",
								"generate-excel"
							]
						}
					},
					"response": []
				},
				{
					"name": "offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[HEADERS] Excel Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet(;.*)?$/i,\r",
									"            \"Invalid Excel type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[EXCEL] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"Excel file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/offers/generate-excel",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"offers",
								"generate-excel"
							]
						}
					},
					"response": []
				},
				{
					"name": "discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[HEADERS] Excel Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet(;.*)?$/i,\r",
									"            \"Invalid Excel type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[EXCEL] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"Excel file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/discounts/generate-excel",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"discounts",
								"generate-excel"
							]
						}
					},
					"response": []
				},
				{
					"name": "commercial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[HEADERS] Excel Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet(;.*)?$/i,\r",
									"            \"Invalid Excel type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[EXCEL] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"Excel file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/commercials/generate-excel",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"commercials",
								"generate-excel"
							]
						}
					},
					"response": []
				},
				{
					"name": "announcer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[HEADERS] Excel Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet(;.*)?$/i,\r",
									"            \"Invalid Excel type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[EXCEL] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"Excel file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/announcers/generate-excel",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"announcers",
								"generate-excel"
							]
						}
					},
					"response": []
				},
				{
					"name": "clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"[HEADERS] Excel Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/vnd\\.openxmlformats-officedocument\\.spreadsheetml\\.sheet(;.*)?$/i,\r",
									"            \"Invalid Excel type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[EXCEL] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"Excel file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/clients/generate-excel",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"clients",
								"generate-excel"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "export PDF",
			"item": [
				{
					"name": "auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login Successful\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    const token = pm.response.json().id_token;\r",
									"    pm.environment.set(\"JWT_Token\", token);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"admin\",\r\n  \"rememberMe\": false\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurl}}/api/authenticate",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "zoneManagers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. _____ HTTP VALIDATION _____\r",
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. _____ HEADER VALIDATION _____\r",
									"pm.test(\"[HEADERS] PDF Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/pdf(;.*)?$/i, \"Invalid MIME type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PDF] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"PDF file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/zone-managers/generate-pdf",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"zone-managers",
								"generate-pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "QR codes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. _____ HTTP VALIDATION _____\r",
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. _____ HEADER VALIDATION _____\r",
									"pm.test(\"[HEADERS] PDF Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/pdf(;.*)?$/i, \"Invalid MIME type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PDF] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"PDF file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/qr-codes/export/pdf",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"qr-codes",
								"export",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "partners",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. _____ HTTP VALIDATION _____\r",
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. _____ HEADER VALIDATION _____\r",
									"pm.test(\"[HEADERS] PDF Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/pdf(;.*)?$/i, \"Invalid MIME type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PDF] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"PDF file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/partners/generate-pdf",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"partners",
								"generate-pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "offer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. _____ HTTP VALIDATION _____\r",
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. _____ HEADER VALIDATION _____\r",
									"pm.test(\"[HEADERS] PDF Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/pdf(;.*)?$/i, \"Invalid MIME type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PDF] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"PDF file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/offers/generate-pdf",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"offers",
								"generate-pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "discount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. _____ HTTP VALIDATION _____\r",
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. _____ HEADER VALIDATION _____\r",
									"pm.test(\"[HEADERS] PDF Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/pdf(;.*)?$/i, \"Invalid MIME type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PDF] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"PDF file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/discounts/generate-pdf",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"discounts",
								"generate-pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "commercial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. _____ HTTP VALIDATION _____\r",
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. _____ HEADER VALIDATION _____\r",
									"pm.test(\"[HEADERS] PDF Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/pdf(;.*)?$/i, \"Invalid MIME type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PDF] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"PDF file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/commercials/generate-pdf",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"commercials",
								"generate-pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "announcer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. _____ HTTP VALIDATION _____\r",
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. _____ HEADER VALIDATION _____\r",
									"pm.test(\"[HEADERS] PDF Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/pdf(;.*)?$/i, \"Invalid MIME type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PDF] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"PDF file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/announcers/generate-pdf",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"announcers",
								"generate-pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "clients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. _____ HTTP VALIDATION _____\r",
									"pm.test(\"[HTTP] Successful PDF generation (200 OK)\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2. _____ HEADER VALIDATION _____\r",
									"pm.test(\"[HEADERS] PDF Content-Type\", () => {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\"))\r",
									"        .to.match(/^application\\/pdf(;.*)?$/i, \"Invalid MIME type\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PDF] Non-empty content\", () => {\r",
									"    pm.expect(pm.response.stream.byteLength).to.be.above(100, \"PDF file is too small\");\r",
									"});\r",
									"\r",
									"pm.test(\"[PERF] Response time <1000\", () => {\r",
									"    pm.expect(pm.response.responseTime)\r",
									"        .to.be.below(1000, \"Response time exceeded 1000ms\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{JWT_Token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/api/clients/generate-pdf",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"api",
								"clients",
								"generate-pdf"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}